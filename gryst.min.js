var gryst=gryst||{};gryst.agg={max:function(e,c){var d=e;c&&(d=[],e.forEach(function(a,b){d[b]=e[b][c]}));return Math.max.apply(this,d)},min:function(e,c){var d=e;c&&(d=[],e.forEach(function(a,b){d[b]=e[b][c]}));return Math.min.apply(this,d)},avg:function(e,c){var d=0,a=0;e.forEach(function(b){d++;a+=null==b[c]?0:b[c]});return a/d}};
(function(){var e=function(c,d){d=d||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");a.initCustomEvent(c,d.bubbles,d.cancelable,d.detail);return a};e.prototype=window.Event.prototype;window.CustomEvent=e})();
gryst.common={getParamNames:function(e){e=e.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,"");e=e.slice(e.indexOf("(")+1,e.indexOf(")")).match(/([^\s,]+)/g);null===e&&(e=[]);return e},getArguments:function(e,c){var d,a=[];e.forEach(function(b){d=c[b.id];void 0==b.field?a.push(b.table[d]):a.push(b.table[d][b.field])});return a},addToMap:function(e,c,d){Array.isArray(c)&&c.forEach(function(a){gryst.common.addToMap(e,a,d)});e.hasOwnProperty(c)?(!1===Array.isArray(e[c])&&(e[c]=[e[c]]),e[c].push(d)):
e[c]=d},cloneObj:function(e,c){var d,a=c||{};for(d in e)e.hasOwnProperty(d)&&(a[d]=e[d]);return a},detectType:function(e){if(null==e)return null;var c=typeof e;if("number"===c||"string"===c||"boolean"===c)return c;if(e instanceof Date)return"date";if(Array.isArray(e))return"array";if("object"===c)return c;throw"Could not determine type";},isEmpty:function(e){return void 0==e||null==e},getFieldRefs:function(e,c){var d=[];(Array.isArray(e)?e:e.split(",")).forEach(function(a){a=a.trim();"$"!=a[0]&&d.push(gryst.common.getField(a,
c))});return d},getField:function(e,c){var d,a=e.split(".");if(1==a.length){if(void 0!=c[a[0]])return{id:a[0],table:c[a[0]],toString:function(){return e}};var b=Object.getOwnPropertyNames(c);for(d=0;d<b.length;d++)if(0<c[b[d]].length&&void 0!=c[b[d]][0][a[0]])return{id:b[d],field:a[0],table:c[b[d]],toString:function(){return e}};throw"Could not resolve field reference: "+e;}return{id:a[0],field:a[1],table:c[a[0]],toString:function(){return e}}},getRow:function(e,c){return e.table[c[e.id]]},l:"abcdefghijklmnopqrstuvwxyz",
createTableID:function(e,c){c=c||"";for(var d,a=0;a<gryst.common.l.length;a++)if(d=c+gryst.common.l[a],!(d in e))return d;return gryst.common.createTableID(e,c+"a")}};
(function(){gryst.from=function(a,b){return(new gryst.Query).from(a,b)};gryst.From=function(a,b,f,g){this.tableID=a;this.tables=b;this.getJoinMap=f;this.setJoinMap=g};gryst.From.$inject=["$tables","$getJoinMap","$setJoinMap"];gryst.From.prototype={run:function(){var a=this,b,f,g=this.getJoinMap(),c=this.tables[this.tableID];if(0==g.length)c.forEach(function(f,c){b={};b[a.tableID]=c;g.push(b)});else return f=[],g.forEach(function(g){c.forEach(function(c,d){b=gryst.common.cloneObj(g);b[a.tableID]=d;
f.push(b)})}),this.setJoinMap(f),f;return g}};gryst.Group=function(a,b,f,g,c,d){this.tables=g;this.getJoinMap=c;this.setJoinMap=d;this.tableID=f;"function"==typeof a?(this.groupFunc=a,this.groupFuncParams=gryst.common.getParamNames(a)):this.groupFuncParams=a;"function"==typeof b?(this.keyFunc=b,this.keyFuncParams=gryst.common.getParamNames(b)):this.keyFuncParams=b};gryst.Group.$inject=["$tables","$getJoinMap","$setJoinMap"];gryst.Group.prototype={run:function(){var a=this,b,f,g,c,d=this.getJoinMap(),
e=gryst.common.getFieldRefs(this.keyFuncParams,this.tables),l=gryst.common.getFieldRefs(this.groupFuncParams,this.tables),m=new gryst.Grouping;this.tables[this.tableID]=[];if(0==d.length)return this.tables[this.tableID];this.keyFunc?d.forEach(function(f){b=gryst.common.getArguments(e,f);g=a.keyFunc.apply(a,b);m.addKey(g,f)}):d.forEach(function(a){b=gryst.common.getArguments(e,a);g={};e.forEach(function(a,f){a.field?g[a.field]=b[f]:gryst.common.cloneObj(b[f],g)});m.addKey(g,a)});this.tables[this.tableID]=
m.getResult(l,this.groupFunc);c=[];this.tables[this.tableID].forEach(function(b,g){f={};f[a.tableID]=g;c.push(f)});this.setJoinMap(c);return this.tables[this.tableID]}};gryst.Grouping=function(){this.keys=[];this.coerced=[];this.map=new Map;this.type=null};var e={stringify:function(a){var b,f,g=[];switch(gryst.common.detectType(a)){case null:g.push("null");break;case "number":case "boolean":g.push(a);break;case "string":g.push('"'+a+'"');break;case "date":g.push("Date("+a.getTime()+")");break;case "array":g.push("[");
for(b=0;b<a.length;b++)0<b&&g.push(","),g.push(e.stringify(a[b]));g.push("]");break;case "object":f=Object.getOwnPropertyNames(a);g.push("{");for(b=0;b<f.length;b++)0<b&&g.push(","),g.push('"'+f[b]+'":'),g.push(e.stringify(a[f[b]]));g.push("}");break;default:throw"Could not determine type: "+a;}return g.join("")},coerceKey:function(a,b){switch(b){case null:case "number":case "string":case "boolean":return a;case "date":return a.getTime();case "object":case "array":return e.stringify(a);case "function":throw"Grouping by functions is not supported";
default:throw"Could not determine key type";}},getArgs:function(a,b){var f,g=[];1==a.length?b.forEach(function(b){f=gryst.common.getArguments(a,b);g.push(f[0])}):b.forEach(function(b){f=gryst.common.getArguments(a,b);g.push(f)});return g}};gryst.Grouping.prototype={addKey:function(a,b){null==this.type&&(this.type=gryst.common.detectType(a));var f=e.coerceKey(a,this.type);this.map.hasOwnProperty(f)||(this.map[f]=[],this.keys.push(a),this.coerced.push(f));this.map[f].push(b);return f},getResult:function(a,
b){var f,g,c,d,h=[];if(b)for(d=0;d<this.keys.length;d++)f=this.coerced[d],f=this.map[f],f=e.getArgs(a,f),c=1==a.length?b.call(gryst.agg,f):b.apply(gryst.agg,f),h.push({Key:this.keys[d],Values:c});else for(d=0;d<this.keys.length;d++)f=this.coerced[d],f=this.map[f],f=e.getArgs(a,f),c=[],f.forEach(function(b){g={};a.forEach(function(a,f){a.field?g[a.field]=b[f]:gryst.common.cloneObj(b[f],g)});c.push(g)}),h.push({Key:this.keys[d],Values:c});return h}};gryst.Injector=function(a){this.dep={$tables:a.tables,
$getMap:function(b,f){return a.getMap(b,f)},$getJoinMap:function(){return a.joinMap},$setJoinMap:function(b){a.joinMap=b},$agg:gryst.agg,$injector:this}};gryst.Injector.prototype={inject:function(a,b){b=b||[];var f,c=this;a.$inject?a.$inject.forEach(function(a){if(c.dep.hasOwnProperty(a))b.push(c.dep[a]);else throw"Unrecognized dependency: "+a;}):(f=gryst.common.getParamNames(a),f.forEach(function(a){c.dep.hasOwnProperty(a)&&b.push(c.dep[a])}));return b}};gryst.Join=function(a,b,f,c,d,e){this.getMap=
f;this.tables=c;this.getJoinMap=d;this.setJoinMap=e;if(gryst.common.isEmpty(a)||gryst.common.isEmpty(b))throw"Join is missing field references.";this.field1=a;this.field2=b};gryst.Join.$inject=["$getMap","$tables","$getJoinMap","$setJoinMap"];var c=function(a){if(0<a.length)if(a[0].hasOwnProperty(this.fieldRef1.id))this.leftField=this.fieldRef1,this.rightField=this.fieldRef2;else if(a[0].hasOwnProperty(this.fieldRef2.id))this.leftField=this.fieldRef2,this.rightField=this.fieldRef1;else throw"Join failed: unable to resolve field references: "+
this.field1+","+this.field2;};gryst.Join.prototype={run:function(){var a=this.getJoinMap();if(0==a.length)return a;this.fieldRef1=gryst.common.getField(this.field1,this.tables);this.fieldRef2=gryst.common.getField(this.field2,this.tables);if(0!=a.length){c.call(this,a);var b=this,f,g,d,e,h=[],l=this.getMap(this.rightField.id,this.rightField.field);a.forEach(function(a){f=a[b.leftField.id];d=b.leftField.table[f][b.leftField.field];l.hasOwnProperty(d)&&(e=l[d],Array.isArray(e)||(e=[e]),e.forEach(function(f){g=
gryst.common.cloneObj(a);g[b.rightField.id]=f;h.push(g)}))});this.setJoinMap(h);return h}}};gryst.JoinMap=function(a,b){var f=this;this.tables=b;this.map=a;this.run=function(){var a,b,c=[],d=0<this.map.length?Object.getOwnPropertyNames(this.map[0]):null;d&&(1==d.length?(a=d[0],this.map.forEach(function(d){b=f.tables[a][d[a]];c.push(b)})):this.map.forEach(function(a){b={};d.forEach(function(c){b[c]=f.tables[c][a[c]]});c.push(b)}));return c}};gryst.JoinMap.$inject=["$tables"];gryst.JSDB=function(){this.Tables=
{}};gryst.JSDB.prototype={loadData:function(a){a&&(Array.isArray(a)?a.forEach(function(a){$.get(a,function(a){self.Tables[a.TableName]=a;self.onTableLoaded(a)})}):$.get(a,function(a){self.Tables[a.TableName]=a}))},objectify:function(a){var b,c,d=0;a.forEach(function(e,k){b={};for(d=0;d<a.Columns.length;d++)c=a.Columns[d].ColumnName,b[c]=""===e[d]?null:e[d];a[k]=b})},setTable:function(a){if(this.Tables[a.TableName])throw"Table has already been added: "+a.TableName;a=new gryst.Table(a);this.objectify(a);
this.Tables[a.TableName]=a;this.onTableLoaded(a);return a},onTableLoaded:function(a){a=new CustomEvent("tableLoaded",{detail:{Object:a}});document.dispatchEvent(a)},onDataLoaded:function(){var a=new CustomEvent("dataLoaded",{detail:{Object:self}});document.dispatchEvent(a)}};gryst.extend=function(a,b,c){c&&(b.$inject=c);gryst.Query.prototype[a]=function(a){a=d.createOp.call(this,b,a);this.runnable.ops.push(a);return this}};gryst.Query=function(){var a=this;this.runnable=new gryst.Runnable;this.injector=
new gryst.Injector(this.runnable);Object.defineProperty(this,"length",{get:function(){null==a.runnable.result&&a.runnable.run();return a.runnable.result.length}})};var d={createOp:function(a,b){b=Array.isArray(b)?b:[b];this.injector.inject(a,b);return new a(b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9])}};gryst.Query.prototype={from:function(a,b){b=b||gryst.common.createTableID(this.runnable.tables);this.runnable.tables[b]=a;var c=d.createOp.call(this,gryst.From,b);this.runnable.ops.push(c);return this},
join:function(a,b,c,g){this.runnable.tables[b]=a;a=d.createOp.call(this,gryst.Join,[c,g]);this.runnable.ops.push(a);return this},where:function(a){a=d.createOp.call(this,gryst.Where,a);this.runnable.ops.push(a);return this},orderBy:function(a){var b=d.createOp.call(this,gryst.Sort,[a,!1]);this.runnable.ops.push(b);return this.thenBy(a)},thenBy:function(a){a=d.createOp.call(this,gryst.Sort,[a,!1]);this.runnable.addChildSort(a);return this},orderByDescending:function(a){a=d.createOp.call(this,gryst.Sort,
[a,!0]);this.runnable.ops.push(a);return this},thenByDescending:function(a){a=d.createOp.call(this,gryst.Sort,[a,!0]);this.runnable.addChildSort(a);return this},group:function(a,b,c){a=d.createOp.call(this,gryst.Group,[a,b,c]);this.runnable.ops.push(a);return this},select:function(a,b){var c=d.createOp.call(this,gryst.Select,[a,b]);this.runnable.ops.push(c);return this},forEach:function(a){var b=this;this.runnable.run().forEach(function(c,d){a.call(b,c,d)})},run:function(){return this.runnable.run()},
get:function(a){null==this.runnable.result&&this.runnable.run();return this.runnable.result[a]}};gryst.Runnable=function(){this.tables={};this.joinMap=[];this.ops=[];this.result=null};gryst.Runnable.prototype={addChildSort:function(a){for(var b=this.ops.length-1;0<=b;b--)if(this.ops[b]instanceof gryst.Sort){this.ops[b].setChild(a);return}this.ops.push(a)},getMap:function(a,b){var c=this.tables[a],d;c.hasOwnProperty("Maps")||(c.Maps={});if(c.Maps.hasOwnProperty(b))return c.Maps[b];d=new Map;c.forEach(function(a,
c){gryst.common.addToMap(d,a[b],c)});return c.Maps[b]=d},run:function(){var a=this;this.joinMap=[];this.result=null;this.ops.forEach(function(b){a.result=b.run()});return this.result===this.joinMap?(new gryst.JoinMap(this.joinMap,this.tables)).run():this.result}};gryst.Select=function(a,b,c,d){this.tables=c;this.getJoinMap=d;this.tableID=b;if("function"==typeof a){if(this.func=a,this.params=gryst.common.getParamNames(a),0===this.params.length)throw"Select function has no parameters.";}else this.params=
a};gryst.Select.$inject=["$tables","$getJoinMap"];gryst.Select.prototype={run:function(){var a=this,b,c,d,e=this.getJoinMap();this.tableID=this.tableID||gryst.common.createTableID(this.tables);this.tables[this.tableID]=[];if(0==e.length)return this.tables[this.tableID];var k=gryst.common.getFieldRefs(this.params,this.tables);this.func?e.forEach(function(d){c=gryst.common.getArguments(k,d);b=a.func.apply(a,c);a.tables[a.tableID].push(b)}):e.forEach(function(b){c=gryst.common.getArguments(k,b);d={};
k.forEach(function(a,b){a.field?d[a.field]=c[b]:gryst.common.cloneObj(c[b],d)});a.tables[a.tableID].push(d)});return this.tables[this.tableID]}}})();gryst.extend("skip",function(e,c,d){this.run=function(){var a=c().slice(e);d(a);return a}},["$getJoinMap","$setJoinMap"]);gryst.extend("take",function(e,c,d){this.run=function(){var a=c().slice(0,e);d(a);return a}},["$getJoinMap","$setJoinMap"]);
(function(){gryst.Sort=function(c,d,a,b,e){this.tables=a;this.getJoinMap=b;this.setJoinMap=e;this.field=c;this.desc=d;this.type=this.childSort=null;this.isRoot=!0};gryst.Sort.$inject=["$tables","$getJoinMap","$setJoinMap"];var e={getSortType:function(c){var d,a;if(0<c.table.length){a=null;for(d=0;d<c.table.length&&gryst.common.isEmpty(a);d++)a=c.table[d][c.field];if(!gryst.common.isEmpty(a))switch(c=gryst.common.detectType(a),c){case "number":case "date":return c;default:return"string"}}},getSortFunction:function(c,
d){return"number"===d||"date"===d?!0===this.desc?function(a,b){var d=e.getKeyForMapping(c,a);return e.getKeyForMapping(c,b)-d}:function(a,b){var d=e.getKeyForMapping(c,a),g=e.getKeyForMapping(c,b);return d-g}:!0===this.desc?function(a,b){var d=e.getKeyForMapping(c,a),g=e.getKeyForMapping(c,b);return d>g?-1:d<g?1:0}:function(a,b){var d=e.getKeyForMapping(c,a),g=e.getKeyForMapping(c,b);return d>g?1:d<g?-1:0}},getKeyForMapping:function(c,d){return c.table[d[c.id]][c.field]},getSubMaps:function(c,d){var a=
[],b,f=[],g=new Map;c.forEach(function(a){b=e.getKeyForMapping(d,a);g.hasOwnProperty(b)||(f.push(b),g[b]=[]);g[b].push(a)});f.forEach(function(b){a.push(g[b])});return a}};gryst.Sort.prototype={setChild:function(c){null==this.childSort?(c.isRoot=!1,this.childSort=c):this.childSort.setChild(c)},run:function(c){var d=this,a=gryst.common.getField(this.field,this.tables),b=e.getSortType(a);if(null==b)return null!=this.childSort?this.childSort.run(c):c;var b=e.getSortFunction(a,b),f;c||(c=this.getJoinMap());
if(2>c.length)return c;c.sort(b);null!=this.childSort&&(f=[],c=e.getSubMaps.call(this,c,a),c.forEach(function(a){1<a.length&&(a=d.childSort.run(a));f=f.concat(a)}),c=f);this.isRoot&&this.setJoinMap(c);return c}};gryst.Table=function(c){var d=c.Data;d.Columns=c.Columns;d.TableName=c.TableName;d.Dictionaries={};d.findByKey=function(a){for(var b=0,c=this.length-1,d=0,d=this.getKeyOrdinal(),e=this.Columns[d].ColumnName;c>=b;){d=Math.round(b+(c-b)/2);if(this[d][e]==a)return this[d];this[d][e]<a?b=d+1:
c=d-1}return null};d.getKeyOrdinal=function(){return this.getColumn("IsKey",!0).ordinal};d.getColumnOrdinal=function(a){return this.getColumn("ColumnName",a).ordinal};d.getColumn=function(a,b){var c,d={};for(c=0;c<this.Columns.length;c++)if(this.Columns[c][a]===b)return d.ordinal=c,d.column=this.Columns[c],d;return null};return d};gryst.Where=function(c,d,a,b){this.tables=d;this.getJoinMap=a;this.setJoinMap=b;this.func=c;this.params=gryst.common.getParamNames(c);if(0===this.params.length)throw"Where function has no parameters.";
};gryst.Where.$inject=["$tables","$getJoinMap","$setJoinMap"];gryst.Where.prototype={run:function(){var c,d,a=this,b=!1,e,g=this.getJoinMap();if(0==g.length)return g;var n=gryst.common.getFieldRefs(this.params,this.tables);g.forEach(function(e,f){c=gryst.common.getArguments(n,e);d=a.func.apply(a,c);!1===d&&(delete g[f],b=!0)});return b?(e=[],Object.keys(g).forEach(function(a){e.push(g[a])}),this.setJoinMap(e),e):g}}})();
